Command Line:
What is a shell? What is "bash?"
- The shell is a program that uses a command-line interface to interpret commands from the user to the operating system. Bash, or Bourne-again shell, is a unix based shell. 

In your own words, write what each of the following commands does:
pwd - prints working directory. The current folder you are working in.
ls - lists files in the working directory. ls with no options will only list   non-hidden files
mv - used to move or rename files and directories 
cd - used to navigate between folders 
touch - creates a file if the file does not exist. 
mkdir - creates a directory 
rm - removes a file or directory depending on what options you apply 
help - displays a summary of commands 
find - searches for files in a directory
grep - searches text in a file for a specified pattern


Git:
What is version control and why do developers use it?
    Version control is a tool that allows developers to view the entire history of revisions to one or more files and merge those revisions by different people. 
    Developers use version control so they can save different versions of code, allow multiple people to work on a different feature of code without affecting the main source code and then giving them the ability to merge it all together. 

What is a commit? What are the best practices for commit messages?
    A commit is snapshot in time or a save point of a project. A good commit message is detailed and states what was changed since the last commit.  

What is a branch?
    A branch is a separate line of development, basically a brand new working directory with its own project history. You can use multiple branches to work on different features of code. 

What are the 3 stages of a git change and how do you move a file from one stage to the other?
    The three stages of a git change are untracked, modified, and staged. Untracked files are new files that are not being tracked. Modified files are tracked but they have been modified since the last commit. Staged files are those files ready to be committed. To move out of the untracked stage, you must git add the file and then commit. To move from modified to staged, you must add the file with git add. Once the files are staged, they are ready to be committed with a git commit and good commit message. 


GitHub:
Write an explanation of and compare Git and GitHub to one another.
    Git is a version control system that is localized on your computer. It is a series of snapshots or commits of your code over time. GitHub is website where you can publish your Git repositories. GitHub can be used both as a backup to your local computer and as a way to collaborate with others. 

In your own words, write instructions to create, clone and update a repository.

Create Repository for New Project:
    - Navigate to your GitHub account and click the Repositories option, then click New
    - Give your repository a name, description, public or private. Click Create repository.
    - Copy the URL link to this depository
    - On your local computer, navigate to the directory that you want to clone the GitHub repository into. 
    - Use ls -la to make sure you check that this directory is not already a Git repository
    - When you verify there is no .git folder, use git clone <url> to clone the repository. 
    - If you type ls, you should see the cloned folder with the same name as the repository, use cd to navigate to this folder. 
    - To update this repository, you should be using a feature-branch. type git checkout - b <new feature branch>
    - Make sure you are on the correct branch by typing git branch
    - Once you add or update files, check your git status
    - type git add <file_name> to stage the files
    - type git commit -m "Good commit message" to commit the files
    - type git status to make sure your working tree is clean
    - Push your feature branch to GitHub using : git push origin <new feature branch>
    - On GitHub, submit a pull request on GitHub from the <new feature branch> to the master branch. 
    - Check to see that the branch you are merging code into and the branch you are merging code from are correct. Then choose Create Pull Request.
    - If you have a team working on this repository, a team member should review the pull request and approve the changes by merging the pull request. If you are working alone on the repository, you can merge your own request. 
    - Verify that the changes have been merged into the master branch and delete the feature branch to keep things cleaned up.

Create Repository for Existing Project:
    - Navigate to your GitHub account and click the Repositories option, then click New
    - Give your repository the proper name, description, public or private. Click Create repository.
    - Copy the URL link to this depository
    - On your local computer, navigate to the folder you would like to push to GitHub. Check to see if this folder is already a git repository. 
    - If this folder is not a git repository, type git init to make it a git repository
    - Type git add . to add all the files in the directory. 
    - git commit -m "initial commit" to commit all the files
    - You must add a remote to link the local project to the GitHub repository but typing git remote add origin <<url>.
    - Push your code to GitHub with git push -u origin master
    - To update this repository, you should be using a feature-branch. type git checkout - b <new feature branch>
    - Make sure you are on the correct branch by typing git branch
    - Once you add or update files, check your git status
    - type git add <file_name> to stage the files
    - type git commit -m "Good commit message" to commit the files
    - type git status to make sure your working tree is clean
    - Push your feature branch to GitHub using : git push origin <new feature branch>
    - On GitHub, submit a pull request on GitHub from the <new feature branch> to the master branch. 
    - Check to see that the pull request is the correct one and that the branch you are merging code into and the branch you are merging code from are correct. Then choose Create Pull Request.
    - If you have a team working on this repository, a team member should review the pull request and approve the changes by merging the pull request. If you are working alone on the repository, you can merge your own request. 
    - Verify that the changes have been merged into the master branch and delete the feature branch to keep things cleaned up.

In your own words, write instructions to fork, clone and update a repository.
    - Navigate to the correct repository you would like to fork on GitHub.
    - Fork the repository to your personal GitHub account using the Fork button
    - Back in your GitHub account, you should see the forked repository and files. 
    - Copy the URL link to this repository
    - On your local computer, navigate to the directory that you want to clone the GitHub repository into. 
    - Use ls -la to make sure you check that this directory is not already a Git repository
    - When you verify there is no .git folder, use git clone <url> to clone the repository. 
    - If you type ls, you should see the cloned folder with the same name as the repository, use cd to navigate to this folder. 
    - To update this repository, you should be using a feature-branch. type git checkout - b <new feature branch>
    - Make sure you are on the correct branch by typing git branch
    - Once you add or update files, check your git status
    - type git add <file_name> to stage the files
    - type git commit -m "Good commit message" to commit the files
    - type git status to make sure your working tree is clean
    - Push your feature branch to GitHub using : git push origin <new feature branch>
    - On GitHub, submit a pull request on GitHub from the <new feature branch> to the master branch. 
    - Check to see that the pull request is the correct one and that the branch you are merging code into and the branch you are merging code from are correct. Then choose Create Pull Request.
    - If you have a team working on this repository, a team member should review the pull request and approve the changes by merging the pull request. If you are working alone on the repository, you can merge your own request. 
    - Verify that the changes have been merged into the master branch and delete the feature branch to keep things cleaned up. 
    
What is a pull request and how do you create and merge one?
    - A pull request is a request that code you pushed up to GitHub from a feature branch on your local computer be merged into the master branch. 
    - To create a pull request, navigate to the proper GitHub repository online and choose either Compare and Pull Request if available or Create New Pull Request option
    - Check to see that the pull request is the correct one and that the branch you are merging code into and the branch you are merging code from are correct. Then choose Create Pull Request.
    - Typically, you will be working on a team, so you will wait for a team member to review the changes and then merge them to the master branch. 
    - If you are working alone on the repository, you can check that the code is correct and then you can merge your own request by selecting Merge Pull Request and then Confirm Merge. 
    - Verify that the changes have been merged into the master branch and delete the feature branch to keep things cleaned up.

Why are pull requests preferred when working with teams?
    - Pull requests are preferred because they notify team members when a feature has been completed and it allows other team members to review, comment, and push follow-up commits on your code before it is merged into the master branch. 
    - Each pull request gets its own unique page on GitHub and acts like a dedicated forum for discussing the proposed feature. The changes you made to the file, comments, and feedback on your code are easily viewable by you and other team members.
    